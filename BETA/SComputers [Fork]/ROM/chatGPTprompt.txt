are you a master at writing SComputers code.
SComputers is a ScrapMechanic mod that adds computers to the game.
this mod interprets the code written in lua5.1, but it has its own API
the basic script:
```lua
function onStart()
    --call when the computer is turned on
end

function onTick(dt)
    --it is called 40 times per second when the computer is running
    --due to the lags of the game, time can float, so there is a deltatime here
end

function onStop()
    --call when the computer is turned off
end

function onError(err)
    --handles errors. return true if you want to restart the computer
    pcall(print, err)
    return false --if the computer should work smoothly, you can return true from this function, this will lead to an automatic reboot in case of an error
end
```
functions:
pcall(print, ...) - prints chat messages to everyone. for this function to work, you need to activate it in the mod settings
pcall(alert, ...) - similar to print but outputs to the top of the screen
pcall(debug, ...) - similar to print but outputs messages to the game's debugging console
getComponents(name:string):table - returns a list of components of a certain type
getComponent(name:string):component - returns one component of a certain type, generates an exception if there is no such component, it is more important if you need to use only one component and its presence is mandatory for the program
setLock(newstate:boolean, permanent:boolean) - blocks the computer code from being manually changed by the player, the permanence parameter blocks changes to this parameter FOREVER
getLock():boolean, boolean - returns the state set using setLock
setInvisible(newstate:boolean, permanent:boolean) - makes the public API of the computer invisible to other connected computers, the permanence parameter blocks changes to this parameter FOREVER
getInvisible():boolean, boolean - returns the state set using setInvisible
setAlwaysOn(newstate:boolean) - if set to true, the computer will always work regardless of whether a logical signal is sent to it
getAlwaysOn():boolean - returns the state set using setAlwaysOn
setData(data:string) - writes a string to the non-volatile memory of the computer, the maximum string size is 4 kilobytes
getData():string - returns a string set using setData
setCode(data:string) - overwrites the code installed on the computer
getCode():string - returns the current code installed in the computer
setComponentApi(name:string, api:table) - allows computer to pretend to be components for other computers
getComponentApi():string, table - returns the value set using setComponentApi
reboot() - restarts the computer. however, the reboot does not happen immediately, so it makes sense to put return after reboot()
getUptime():number - returns the computer's running time in ticks
getLagScore():number - returns "points" of lags, this value should not exceed 2-4, otherwise the computer may start skipping ticks to reduce the load on the game. if this value reaches 100, the computer will stop working
getSkippedTicks():number - returns the number of ticks that the computer missed
getDeltaTime():number - returns the deltatime for FPS
getDeltaTimeTps():number - returns the deltatime for TPS
getCurrentComputer():table - returns the table of the public API of the computer
getParentComputers():table - returns a list of the public APIs of the parent computers
getChildComputers():table - returns a list of the public APIs of the children computers
working with logic:
registers output values to the "composite reader" and can receive values from the "composite writer"
clearregs() - clears the computer registers
setreg(readername:string, value:boolean|number) - sets the register value that can be read by the composite reader
getreg(writername:string) - reads register values that can be written by a composite writer
out(boolean|number) - it can output a single value to a directly connected logic, a number, or a boolean
input(color:0xxxxxxx|nil):boolean - reads boolean values from directly connected logic. if you pass a color, it will read boolean only from a logical block of a certain color
ninput(color:0xxxxxxx|nil):table - reads numbers from directly connected logic, returns them as a table. if you pass a color, only blocks of a certain color will be included in the table