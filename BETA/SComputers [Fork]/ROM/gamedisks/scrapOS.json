{"init.lua": "aWYgbm90IHN5c3RlbURpc2sgdGhlbg0KICAgIHN5c3RlbURpc2sgPSAuLi4NCmVuZA0KDQpkbyAtLdC30LDQs9Cw0LvQvtCy0L7Quiwg0LjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXRgiDQs9C70LDQstC90YvQtSDRhNGD0L3QutGG0LjQuCDQutC+0LzQv9GM0Y7RgtC10YDQsA0KICAgIGlmIFNUT1BQRUQgdGhlbiByZXR1cm4gZW5kIC0t0LXRgdC70Lgg0LrQvtC80L8g0L7RgdGC0LDQvdC+0LLQu9C10L0o0LrQvtC80L8g0LTQtdC70LDQtdGCINC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0Lkg0YLQuNC6INC/0L7RgdC70LUg0LLRi9C60LvRjtGH0LXQvdC40Y8pDQogICAgaWYgU1RBUlRFRCB0aGVuIC0t0LXRgdC70Lgg0LrQvtC80L8g0YPQttC1INC30LDQv9GD0YjQtdC9DQogICAgICAgIGlmIG5vdCBfZW5kdGljayB0aGVuIC0t0LXRgdC70Lgg0LrQvtC80L8g0YHQtdC50YfQsNGBINC90LAg0LLRi9C60LvRjtGH0LDQtdGC0YzRgdGPDQogICAgICAgICAgICBpZiBub3QgRVJST1IgdGhlbiAtLdC10YHQu9C4INC90LXRgiDQvtGI0LjQsdC+0LosINGC0L4g0LrQvtC80L8g0YDQsNCx0L7RgtCw0LXRgiwg0LXRgdC70Lgg0L7RiNC40LHQutCwINC/0L7Rj9Cy0LjRgtGM0YHRjyDRgtC+INC+0L0g0L/QtdGA0LXRgdGC0LDQvdC10YIg0LLRi9C30YvQstCw0YLRjCBvblRpY2ssINC4INCx0YPQtNC10YIg0LbQtNCw0YLRjCDQstGL0LrQu9GO0YfQtdC90LjRjw0KICAgICAgICAgICAgICAgIGxvY2FsIHJhbiwgZXJyID0gcGNhbGwob25UaWNrKSAtLdGC0LjQutCw0LXQvA0KICAgICAgICAgICAgICAgIGlmIG5vdCByYW4gdGhlbg0KICAgICAgICAgICAgICAgICAgICBFUlJPUiA9IGVyciBvciAidW5rbm93biINCiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihFUlJPUikgLS3Qv9C10YDQtdC00LDQu9C4INCyINC/0YDQvtCz0YDQsNC80LzRgyDRh9GC0L4g0YjQu9GP0L/QsA0KICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIFNUT1BQRUQgPSB0cnVlDQogICAgICAgICAgICBvblN0b3AoKQ0KICAgICAgICBlbmQNCiAgICAgICAgcmV0dXJuIC0t0L3QtdCy0LDQttC90L4g0L/QvtC00LDQvSDRgdC40L3QsNC7INC40LvQuCDQvdC10YIsINC/0L7RgdC70LUg0YHRgtCw0YDRgtCwINC60L7QvNC/INC90LUg0LHRg9C00LXRgiDQv9C+0LTQs9GA0YPQttCw0YLRjCDRhNGD0L3QutGG0LjQuCDQt9Cw0L3QvtCz0L4NCiAgICBlbHNlaWYgb25TdGFydCB0aGVuIC0t0LXRgdC70Lgg0LrQvtC80L8g0LXRidC1INC90LUg0LfQsNC/0YPRiNC10L0sINC90L4g0LzQtdGC0L7QtNGLINGD0LbQtSDQv9C+0LTQs9GA0YPQttC10L3Riw0KICAgICAgICBsb2NhbCByYW4sIGVyciA9IHBjYWxsKG9uU3RhcnQpDQogICAgICAgIGlmIG5vdCByYW4gdGhlbg0KICAgICAgICAgICAgRVJST1IgPSBlcnIgb3IgInVua25vd24iDQogICAgICAgICAgICBvbkVycm9yKEVSUk9SKQ0KICAgICAgICBlbmQNCiAgICAgICAgaWYgX2VuZHRpY2sgdGhlbiAtLdC00LvRjyDQutC+0YDQtdC60YLQvdC+0Lkg0L7QsdGA0LDQsdC+0YLQutC4INC30LDQv9GD0YHQutCwINC90LAg0L7QtNC40L0g0YLQuNC6KNC60L7QvNC/INGB0LTQtdC70LDQtdC7IDIg0YLQuNC60LAsINGN0YLQviDRhNC40YfQsCDRh9GC0L7QsdGLINC+0YLRgdC70LXQtNC40YLRjCDQvtGC0LrQu9GO0YfQtdC90LjRjykNCiAgICAgICAgICAgIFNUT1BQRUQgPSB0cnVlDQogICAgICAgICAgICBvblN0b3AoKQ0KICAgICAgICBlbmQNCg0KICAgICAgICBTVEFSVEVEID0gdHJ1ZQ0KICAgICAgICByZXR1cm4gLS3QuCDQvtC/0Y/RgtGMIHJldHVybg0KICAgIGVuZA0KZW5kDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCmZ1bmN0aW9uIG9uU3RhcnQoKQ0KICAgIF9PU1ZFUlNJT04gPSAic2NyYXBPUyB2Mi4wIg0KDQogICAgZG8NCiAgICAgICAgdXRpbHMgPSBhc3NlcnQobG9hZChzeXN0ZW1EaXNrLnJlYWRGaWxlKCIvbGliL3V0aWxzLmx1YSIpLCAiPS9saWIvdXRpbHMubHVhIikpKCkNCiAgICAgICAgZnMgPSBhc3NlcnQobG9hZChzeXN0ZW1EaXNrLnJlYWRGaWxlKCIvbGliL2ZzLmx1YSIpLCAiPS9saWIvZnMubHVhIiwgbmlsLCB1dGlscy5jcmVhdGVFbnYoKSkpKCkNCg0KICAgICAgICBmb3IgXywgbmFtZSBpbiBpcGFpcnMoZnMubGlzdCgiL2xpYiIpKSBkbw0KICAgICAgICAgICAgaWYgbm90IF9HW2ZzLmhpZGVFeHAobmFtZSldIHRoZW4NCiAgICAgICAgICAgICAgICBsb2NhbCBwYXRoID0gZnMuY29uY2F0KCIvbGliIiwgbmFtZSkNCiAgICAgICAgICAgICAgICBfR1tmcy5oaWRlRXhwKG5hbWUpXSA9IGFzc2VydChsb2FkKGZzLnJlYWQocGF0aCksICI9IiAuLiBwYXRoLCBuaWwsIHV0aWxzLmNyZWF0ZUVudigpKSkoKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgIGVuZA0KDQogICAgb3BlblByb2dyYW1zID0ge30NCg0KICAgIGRvDQogICAgICAgIGxvY2FsIHBhdGggPSAiL3NlcnZpY2VzIg0KICAgICAgICBpZiBmcy5leGlzdHMocGF0aCkgYW5kIGZzLmlzRGlyZWN0b3J5KHBhdGgpIHRoZW4NCiAgICAgICAgICAgIGZvciBpLCB2IGluIGlwYWlycyhmcy5saXN0KHBhdGgpKSBkbw0KICAgICAgICAgICAgICAgIGxvY2FsIHByb2dyYW1tUGF0aCA9IGZzLmNvbmNhdChwYXRoLCB2KQ0KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChvcGVuUHJvZ3JhbXMsIHtlbmFibGUgPSB0cnVlLCBwYXRoID0gcHJvZ3JhbW1QYXRofSkNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICANCiAgICBkbw0KICAgICAgICBtYWluUHJvZ3JhbW1QYXRoID0gc2V0dGluZ3MuY3VycmVudC5tYWluUHJvZ3JhbW1QYXRoDQogICAgICAgIA0KICAgICAgICBpZiBub3Qgc2V0dGluZ3MuY3VycmVudC5kaXNhYmxlV29ya2luZ1dpdGhTY3JlZW5zIHRoZW4NCiAgICAgICAgICAgIGZvciBpLCB2IGluIGlwYWlycyhnZXREaXNwbGF5cygpKSBkbw0KICAgICAgICAgICAgICAgIHYuc2V0U2tpcEF0TGFncyhub3Qgbm90IHNldHRpbmdzLmN1cnJlbnQuZGVmYXVsdFNraXBBdExhZ3MpDQogICAgICAgICAgICAgICAgd2hpbGUgdi5nZXRDbGljaygpIGRvIGVuZA0KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChvcGVuUHJvZ3JhbXMsIHtkZWZhdWx0ID0gdHJ1ZSwgZW5hYmxlID0gdHJ1ZSwgcGF0aCA9IG1haW5Qcm9ncmFtbVBhdGgsIGFyZ3MgPSB7e3NjcmVlbiA9IHZ9fX0pDQogICAgICAgICAgICAgICAgaWYgc2V0dGluZ3MuY3VycmVudC5vbmx5QUZpcnN0U2NyZWVuIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBvblN0b3AoKQ0KICAgIGZvciBpLCB2IGluIGlwYWlycyhnZXREaXNwbGF5cygpKSBkbw0KICAgICAgICB2LmNsZWFyKHV0aWxzLmZvcm1hdENvbG9yKCIwMDAwMDAiKSkNCiAgICAgICAgdi5mbHVzaCgpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gb25UaWNrKCkNCiAgICBmb3IgaSwgdiBpbiBpcGFpcnMob3BlblByb2dyYW1zKSBkbw0KICAgICAgICBpZiB2LmVuYWJsZSB0aGVuDQogICAgICAgICAgICBpZiBub3Qgdi5ydW5uZWQgdGhlbg0KICAgICAgICAgICAgICAgIHYucnVubmVkID0gdHJ1ZQ0KDQogICAgICAgICAgICAgICAgaWYgbm90IHYuZW52IHRoZW4gdi5lbnYgPSB1dGlscy5jcmVhdGVFbnYoKSBlbmQNCiAgICAgICAgICAgICAgICB2LmVudi5vYmplY3QgPSB2DQogICAgICAgICAgICAgICAgdi5lbnYuYXJncyA9IHYuYXJncyBvciB7fSAtLS4uLiDQsiDQvtCx0YvRh9GM0L3Ri9GFINGH0LDQvdC60LDRhSDQutC+0LTQsCDQvdC1INGA0LDQsdC+0YLQsNC10YIsINCy0LjQtNC40LzQviDQsdCw0LMg0LjQvdGC0LXRgNC/0YDQuNGC0LDRgtC+0YDQsA0KDQogICAgICAgICAgICAgICAgbG9jYWwgcmVzdWx0LCBlcnIgPSBsb2FkKGZzLnJlYWQodi5wYXRoKSwgIj0iIC4uIHYucGF0aCwgbmlsLCB2LmVudikNCiAgICAgICAgICAgICAgICBpZiBub3QgcmVzdWx0IHRoZW4NCiAgICAgICAgICAgICAgICAgICAgdi5lbmFibGUgPSBmYWxzZQ0KICAgICAgICAgICAgICAgICAgICB2LmVycm9yID0gZXJyIG9yICJ1bmtub3duIg0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgb2ssIGVyciA9IHBjYWxsKHJlc3VsdCwgdW5wYWNrKHYuYXJncyBvciB7fSkpDQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvayB0aGVuDQogICAgICAgICAgICAgICAgICAgICAgICB2LmVuYWJsZSA9IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB2LmVycm9yID0gIm9uIGluaXQ6ICIgLi4gKGVyciBvciAidW5rbm93biIpDQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHYuZW52Lm9uU3RhcnQgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIG9rLCBlcnIgPSBwY2FsbCh2LmVudi5vblN0YXJ0LCB1bnBhY2sodi5hcmdzIG9yIHt9KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb2sgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LmVuYWJsZSA9IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuZXJyb3IgPSAib24gc3RhcnQ6ICIgLi4gKGVyciBvciAidW5rbm93biIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBjYWxsKHYuZW52Lm9uRXJyb3IsIGVyciwgdW5wYWNrKHYuYXJncyBvciB7fSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgaWYgdi5lbnYub25UaWNrIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgb2ssIGVyciA9IHBjYWxsKHYuZW52Lm9uVGljaywgdW5wYWNrKHYuYXJncyBvciB7fSkpDQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvayB0aGVuDQogICAgICAgICAgICAgICAgICAgICAgICB2LmVuYWJsZSA9IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB2LmVycm9yID0gIm9uIHRpY2s6ICIgLi4gKGVyciBvciAidW5rbm93biIpDQogICAgICAgICAgICAgICAgICAgICAgICBwY2FsbCh2LmVudi5vbkVycm9yLCBlcnIsIHVucGFjayh2LmFyZ3Mgb3Ige30pKQ0KICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgICAgaWYgdi5lcnJvciBhbmQgbm90IHYucHJpbnRlZEVycm9yIGFuZCBub3Qgdi5ub3RQcmludEVycm9yIHRoZW4NCiAgICAgICAgICAgIC0tcHJpbnQodi5wYXRoLCB2LmVycm9yKQ0KICAgICAgICAgICAgaWYgdi5kZWZhdWx0IHRoZW4NCiAgICAgICAgICAgICAgICBlcnJvcih2LmVycm9yLCAwKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICB2LnByaW50ZWRFcnJvciA9IHRydWUNCiAgICAgICAgZW5kDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gb25FcnJvcihlcnIpDQogICAgZXJyb3IoZXJyLCAwKQ0KZW5k", "bin/calc.lua": "b3B0aW9ucyA9IGFyZ3NbMV0NCnNjcmVlbiA9IG9wdGlvbnMuc2NyZWVuDQpndWkgPSBndWlsaWIuY3JlYXRlKHNjcmVlbikNCg0Kc2NlbmUgPSBndWkuY3JlYXRlU2NlbmUoImNlY2VjZSIpDQoNCnNpemUgPSA1DQppZiBndWkuc2l6ZVggPj0gNjQgdGhlbg0KICAgIHNpemUgPSAxMA0KZW5kDQppZiBndWkuc2l6ZVggPj0gMTI4IHRoZW4NCiAgICBzaXplID0gMjANCmVuZA0KDQpsYWJlbCA9IHNjZW5lLmNyZWF0ZUxhYmVsKDAsIDAsIGd1aS5zaXplWCAtIHNpemUgLSA1LCBzaXplLCAiIiwgIjQ5NDk0OSIsICJGRkZGRkYiKQ0KDQpleGl0QnV0dG9uID0gc2NlbmUuY3JlYXRlQnV0dG9uKA0KICAgIGd1aS5zaXplWCAtIHNpemUsDQogICAgMCwNCiAgICBzaXplLA0KICAgIHNpemUsDQogICAgIlgiLA0KICAgICJGRjAwMDAiLA0KICAgICJGRkZGRkYiLA0KICAgICIwMDAwRkYiLA0KICAgICIwMDAwMDAiLA0KICAgIDENCikNCg0KZnVuY3Rpb24gY3JlYXRlQnV0dG9uKHgsIHksIHRleHQsIGNvbG9yKQ0KICAgIHJldHVybiBzY2VuZS5jcmVhdGVCdXR0b24oDQogICAgICAgIDEgKyAoeCAqIChzaXplICsgMikpLA0KICAgICAgICBzaXplICsgMSArICh5ICogKHNpemUgKyAyKSksDQogICAgICAgIHNpemUsDQogICAgICAgIHNpemUsDQogICAgICAgIHRleHQsDQogICAgICAgIGNvbG9yLA0KICAgICAgICAiRkZGRkZGIiwNCiAgICAgICAgY29sb3IsDQogICAgICAgICIwMDAwMDAiLA0KICAgICAgICAxDQogICAgKQ0KZW5kDQoNCmIxID0gY3JlYXRlQnV0dG9uKDAsIDAsICIxIiwgIjAwMDBGRiIpDQpiMiA9IGNyZWF0ZUJ1dHRvbigxLCAwLCAiMiIsICIwMDAwRkYiKQ0KYjMgPSBjcmVhdGVCdXR0b24oMiwgMCwgIjMiLCAiMDAwMEZGIikNCg0KYjQgPSBjcmVhdGVCdXR0b24oMCwgMSwgIjQiLCAiMDAwMEZGIikNCmI1ID0gY3JlYXRlQnV0dG9uKDEsIDEsICI1IiwgIjAwMDBGRiIpDQpiNiA9IGNyZWF0ZUJ1dHRvbigyLCAxLCAiNiIsICIwMDAwRkYiKQ0KDQpiNyA9IGNyZWF0ZUJ1dHRvbigwLCAyLCAiNyIsICIwMDAwRkYiKQ0KYjggPSBjcmVhdGVCdXR0b24oMSwgMiwgIjgiLCAiMDAwMEZGIikNCmI5ID0gY3JlYXRlQnV0dG9uKDIsIDIsICI5IiwgIjAwMDBGRiIpDQoNCmJjID0gY3JlYXRlQnV0dG9uKDAsIDMsICJYIiwgIkZGMDAwMCIpDQpiMCA9IGNyZWF0ZUJ1dHRvbigxLCAzLCAiMCIsICIwMDAwRkYiKQ0KYmUgPSBjcmVhdGVCdXR0b24oMiwgMywgIj0iLCAiMDBGRjAwIikNCg0KYmYxID0gY3JlYXRlQnV0dG9uKDMsIDAsICIrIiwgIkZGRkYwMCIpDQpiZjIgPSBjcmVhdGVCdXR0b24oMywgMSwgIi0iLCAiRkZGRjAwIikNCmJmMyA9IGNyZWF0ZUJ1dHRvbigzLCAyLCAiKiIsICJGRkZGMDAiKQ0KYmY0ID0gY3JlYXRlQnV0dG9uKDMsIDMsICIvIiwgIkZGRkYwMCIpDQoNCmJuID0gY3JlYXRlQnV0dG9uKDQsIDAsICI8IiwgIkZGMDAwMCIpDQoNCmd1aS5zZWxlY3Qoc2NlbmUpDQoNCmZ1bmN0aW9uIG9uU3RhcnQoKQ0KICAgIHN0ciA9ICIiDQplbmQNCg0KZnVuY3Rpb24gb25UaWNrKCkNCiAgICBndWkudGljaygpDQogICAgaWYgZXhpdEJ1dHRvbi5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgdXRpbHMuZXhpdChvYmplY3QpDQogICAgZWxzZWlmIGIxLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjEiDQogICAgZWxzZWlmIGIyLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjIiDQogICAgZWxzZWlmIGIzLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjMiDQogICAgZWxzZWlmIGI0LmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjQiDQogICAgZWxzZWlmIGI1LmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjUiDQogICAgZWxzZWlmIGI2LmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjYiDQogICAgZWxzZWlmIGI3LmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjciDQogICAgZWxzZWlmIGI4LmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjgiDQogICAgZWxzZWlmIGI5LmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjkiDQogICAgZWxzZWlmIGIwLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIjAiDQogICAgZWxzZWlmIGJmMS5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgc3RyID0gc3RyIC4uICIrIg0KICAgIGVsc2VpZiBiZjIuZ2V0U3RhdGUoKSB0aGVuDQogICAgICAgIHN0ciA9IHN0ciAuLiAiLSINCiAgICBlbHNlaWYgYmYzLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHIgLi4gIioiDQogICAgZWxzZWlmIGJmNC5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgc3RyID0gc3RyIC4uICIvIg0KICAgIGVsc2VpZiBiYy5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgc3RyID0gIiINCiAgICBlbHNlaWYgYmUuZ2V0U3RhdGUoKSB0aGVuDQogICAgICAgIGxvY2FsIHJlc3VsdCA9IHtwY2FsbChsb2Fkc3RyaW5nLCAicmV0dXJuICIgLi4gc3RyKX0NCiAgICAgICAgaWYgcmVzdWx0WzFdIHRoZW4NCiAgICAgICAgICAgIGxvY2FsIHJlc3VsdCA9IHtwY2FsbChyZXN1bHRbMl0pfQ0KICAgICAgICAgICAgaWYgcmVzdWx0WzFdIHRoZW4NCiAgICAgICAgICAgICAgICBzdHIgPSB0b3N0cmluZyhyZXN1bHRbMl0gb3IgIiIpDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQogICAgZWxzZWlmIGJuLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICBzdHIgPSBzdHI6c3ViKDEsICNzdHIgLSAxKQ0KICAgIGVuZA0KICAgIGxhYmVsLnRleHQgPSBzdHINCiAgICBndWkuZHJhdygpDQplbmQ=", "bin/cam.lua": "b3B0aW9ucyA9IGFyZ3NbMV0NCnNjcmVlbiA9IG9wdGlvbnMuc2NyZWVuDQpsb2NhbCBvbGRfc2tpcGF0bGFncyA9IHNjcmVlbi5nZXRTa2lwQXRMYWdzKCkNCnNjcmVlbi5zZXRTa2lwQXRMYWdzKGZhbHNlKQ0KZ3VpID0gZ3VpbGliLmNyZWF0ZShzY3JlZW4pDQoNCg0KY3VycmVudEZyYW1lID0ge3ggPSBzY3JlZW4uZ2V0V2lkdGgoKSwgeSA9IHNjcmVlbi5nZXRIZWlnaHQoKSwgZGF0YSA9IHt9fQ0KZm9yIHkgPSAxLCBzY3JlZW4uZ2V0SGVpZ2h0KCkgZG8NCiAgICBjdXJyZW50RnJhbWUuZGF0YVt5XSA9IHt9DQogICAgZm9yIHggPSAxLCBzY3JlZW4uZ2V0V2lkdGgoKSBkbw0KICAgICAgICBjdXJyZW50RnJhbWUuZGF0YVt5XVt4XSA9ICIwMDAwMDAiDQogICAgZW5kDQplbmQNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCnNjZW5lID0gZ3VpLmNyZWF0ZVNjZW5lKCIwMDAwNzciKQ0KDQoNCmV4aXRCdXR0b24gPSBzY2VuZS5jcmVhdGVCdXR0b24oDQogICAgZ3VpLnNpemVYIC0gOCwNCiAgICAwLA0KICAgIDgsDQogICAgOCwNCiAgICAiWCIsDQogICAgIkZGMDAwMCIsDQogICAgIkZGRkZGRiIsDQogICAgbmlsLA0KICAgIG5pbCwNCiAgICAxDQopDQoNCnNlbGVjdENhbWVyYUJ1dHRvbiA9IHNjZW5lLmNyZWF0ZUJ1dHRvbigNCiAgICBndWkuc2l6ZVggLSA4LA0KICAgIDgsDQogICAgOCwNCiAgICA4LA0KICAgICJTIiwNCiAgICAiMDBGRjAwIiwNCiAgICAiRkZGRkZGIiwNCiAgICBuaWwsDQogICAgbmlsLA0KICAgIDENCikNCg0KbG9hZEJ1dHRvbiA9IHNjZW5lLmNyZWF0ZUJ1dHRvbigNCiAgICBndWkuc2l6ZVggLSA4LA0KICAgIDE2LA0KICAgIDgsDQogICAgOCwNCiAgICAiTCIsDQogICAgImZmZmYwMCIsDQogICAgIkZGRkZGRiIsDQogICAgbmlsLA0KICAgIG5pbCwNCiAgICAxDQopDQoNCnJlbW92ZUJ1dHRvbiA9IHNjZW5lLmNyZWF0ZUJ1dHRvbigNCiAgICBndWkuc2l6ZVggLSA4LA0KICAgIDE2ICsgOCwNCiAgICA4LA0KICAgIDgsDQogICAgIlIiLA0KICAgICJmZjAwMDAiLA0KICAgICJGRkZGRkYiLA0KICAgIG5pbCwNCiAgICBuaWwsDQogICAgMQ0KKQ0KDQpwaG90b0J1dHRvbiA9IHNjZW5lLmNyZWF0ZUJ1dHRvbigNCiAgICBndWkuc2l6ZVggLSA4LA0KICAgIGd1aS5zaXplWSAtIDgsDQogICAgOCwNCiAgICA4LA0KICAgICJQIiwNCiAgICAiZmZmZmZmIiwNCiAgICAiMDAwMDAwIiwNCiAgICBuaWwsDQogICAgbmlsLA0KICAgIDENCikNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCmd1aS5zZWxlY3Qoc2NlbmUpDQoNCmZ1bmN0aW9uIHJlc2V0Q291bnRlcigpDQogICAgaWYgY2FtZXJhIHRoZW4NCiAgICAgICAgY2FtZXJhLnJlc2V0Q291bnRlcigpDQogICAgZW5kDQplbmQNCg0KZnVuY3Rpb24gb25TdGFydCgpDQplbmQNCg0KZnVuY3Rpb24gb25UaWNrKCkNCiAgICBndWkudGljaygpDQoNCiAgICBpZiBzcGxhc2hGbGFnIHRoZW4NCiAgICAgICAgaWYgZ3VpLmNsaWNrIGFuZCBndWkuY2xpY2tbM10gPT0gInByZXNzZWQiIHRoZW4NCiAgICAgICAgICAgIHNwbGFzaEZsYWcgPSBuaWwNCiAgICAgICAgZW5kDQogICAgICAgIHJldHVybg0KICAgIGVuZA0KDQogICAgaWYgc2VsZWN0ZWRQaG90byB0aGVuDQogICAgICAgIGlmIG5vdCBkcmF3RW5kIHRoZW4NCiAgICAgICAgICAgIGlmIG5vdCBkcmF3WCB0aGVuIGRyYXdYID0gMSBlbmQNCiAgICAgICAgICAgIGZvciB5ID0gMSwgc2VsZWN0ZWRQaG90by55IGRvDQogICAgICAgICAgICAgICAgaWYgbm90IHNlbGVjdGVkUGhvdG8uZGF0YVt5XSBvciBub3Qgc2VsZWN0ZWRQaG90by5kYXRhW3ldW2RyYXdYXSB0aGVuDQogICAgICAgICAgICAgICAgICAgIHNwbGFzaEZsYWcgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUGhvdG8gPSBuaWwNCiAgICAgICAgICAgICAgICAgICAgZHJhd1ggPSBuaWwNCiAgICAgICAgICAgICAgICAgICAgZHJhd0VuZCA9IG5pbA0KICAgICAgICAgICAgICAgICAgICBndWkuc3BsYXNoKCJ0aGUgcGljdHVyZSBpcyBicm9rZW4iKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICBzY3JlZW4uZHJhd1BpeGVsKGRyYXdYIC0gMSwgeSAtIDEsIHNlbGVjdGVkUGhvdG8uZGF0YVt5XVtkcmF3WF0pDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGRyYXdYID0gZHJhd1ggKyAxDQogICAgICAgICAgICBpZiBkcmF3WCA+IHNlbGVjdGVkUGhvdG8ueCB0aGVuDQogICAgICAgICAgICAgICAgZHJhd1ggPSBuaWwNCiAgICAgICAgICAgICAgICBkcmF3RW5kID0gdHJ1ZQ0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgICAgICBndWkudXBkYXRlKCkNCiAgICAgICAgDQogICAgICAgIGlmIGd1aS5jbGljayBhbmQgZ3VpLmNsaWNrWzNdID09ICJwcmVzc2VkIiB0aGVuDQogICAgICAgICAgICBzZWxlY3RlZFBob3RvID0gbmlsDQogICAgICAgICAgICBkcmF3RW5kID0gbmlsDQogICAgICAgICAgICBkcmF3WCA9IG5pbA0KICAgICAgICBlbmQNCiAgICAgICAgcmV0dXJuDQogICAgZW5kDQogICAgDQogICAgaWYgY2FtZXJhIHRoZW4NCiAgICAgICAgaWYgbm90IHBjYWxsKGZ1bmN0aW9uICgpIC0t0LTQu9GPINC+0LHRgNCw0LHQvtGC0LrQuCDRg9C00LDQu9C10L3QuNGPINC60LDQvNC10YDRiw0KICAgICAgICAgICAgY2FtZXJhLmRyYXdDb2xvcldpdGhEZXB0aCh7DQogICAgICAgICAgICAgICAgZ2V0V2lkdGggPSBmdW5jdGlvbiAoKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3VpLnNpemVYDQogICAgICAgICAgICAgICAgZW5kLA0KICAgICAgICAgICAgICAgIGdldEhlaWdodCA9IGZ1bmN0aW9uICgpDQogICAgICAgICAgICAgICAgICAgIHJldHVybiBndWkuc2l6ZVkNCiAgICAgICAgICAgICAgICBlbmQsDQogICAgICAgICAgICAgICAgZHJhd1BpeGVsID0gZnVuY3Rpb24gKHgsIHksIGNvbG9yKQ0KICAgICAgICAgICAgICAgICAgICBjdXJyZW50RnJhbWUuZGF0YVt5ICsgMV1beCArIDFdID0gY29sb3INCiAgICAgICAgICAgICAgICAgICAgc2NyZWVuLmRyYXdQaXhlbCh4LCB5LCBjb2xvcikNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIH0pDQogICAgICAgIGVuZCkgdGhlbg0KICAgICAgICAgICAgY2FtZXJhID0gbmlsDQogICAgICAgIGVuZA0KICAgICAgICBndWkuZHJhdyh0cnVlKQ0KICAgIGVsc2UNCiAgICAgICAgZ3VpLmRyYXcoKQ0KICAgIGVuZA0KDQogICAgaWYgcmVtb3ZlUGhvdG9NZW51IHRoZW4NCiAgICAgICAgcmVtb3ZlUGhvdG9NZW51LmRyYXcoKQ0KDQogICAgICAgIGxvY2FsIGFjdGlvbiA9IHJlbW92ZVBob3RvTWVudS5nZXRTZWxlY3RlZCgpDQogICAgICAgIGlmIGFjdGlvbiB0aGVuDQogICAgICAgICAgICBpZiBhY3Rpb24gfj0gdHJ1ZSB0aGVuDQogICAgICAgICAgICAgICAgZnMucmVtb3ZlKHJlbW92ZVBob3RvTWVudS5maWxlc1thY3Rpb25dKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICByZW1vdmVQaG90b01lbnUgPSBuaWwNCg0KICAgICAgICAgICAgcmVzZXRDb3VudGVyKCkNCiAgICAgICAgZW5kDQogICAgZWxzZWlmIHNlbGVjdENhbWVyYU1lbnUgdGhlbg0KICAgICAgICBzZWxlY3RDYW1lcmFNZW51LmRyYXcoKQ0KDQogICAgICAgIGxvY2FsIGFjdGlvbiA9IHNlbGVjdENhbWVyYU1lbnUuZ2V0U2VsZWN0ZWQoKQ0KICAgICAgICBpZiBhY3Rpb24gdGhlbg0KICAgICAgICAgICAgaWYgYWN0aW9uIH49IHRydWUgdGhlbg0KICAgICAgICAgICAgICAgIGNhbWVyYSA9IHNlbGVjdENhbWVyYU1lbnUuY2FtZXJhc1thY3Rpb25dDQoNCiAgICAgICAgICAgICAgICBjYW1lcmEuc2V0U3RlcCgyNTYpDQogICAgICAgICAgICAgICAgY2FtZXJhLnNldERpc3RhbmNlKDI1NikNCiAgICAgICAgICAgICAgICBjYW1lcmEuc2V0Rm92KG1hdGgucmFkKDc1KSkNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgc2VsZWN0Q2FtZXJhTWVudSA9IG5pbA0KDQogICAgICAgICAgICByZXNldENvdW50ZXIoKQ0KICAgICAgICBlbmQNCiAgICBlbHNlaWYgc2VsZWN0UGhvdG9NZW51IHRoZW4NCiAgICAgICAgc2VsZWN0UGhvdG9NZW51LmRyYXcoKQ0KDQogICAgICAgIGxvY2FsIGFjdGlvbiA9IHNlbGVjdFBob3RvTWVudS5nZXRTZWxlY3RlZCgpDQogICAgICAgIGlmIGFjdGlvbiB0aGVuDQogICAgICAgICAgICBpZiBhY3Rpb24gfj0gdHJ1ZSB0aGVuDQogICAgICAgICAgICAgICAgaWYgbm90IHBjYWxsKGZ1bmN0aW9uICgpDQogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUGhvdG8gPSBzbS5qc29uLnBhcnNlSnNvblN0cmluZyhmcy5yZWFkKHNlbGVjdFBob3RvTWVudS5maWxlc1thY3Rpb25dKSkNCiAgICAgICAgICAgICAgICBlbmQpIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgZ3VpLnNwbGFzaCgidGhlIHBpY3R1cmUgaXMgYnJva2VuIikNCiAgICAgICAgICAgICAgICAgICAgc3BsYXNoRmxhZyA9IHRydWUNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgc2VsZWN0UGhvdG9NZW51ID0gbmlsDQoNCiAgICAgICAgICAgIHJlc2V0Q291bnRlcigpDQogICAgICAgIGVuZA0KICAgIGVsc2UNCiAgICAgICAgaWYgZXhpdEJ1dHRvbi5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgICAgIHNjcmVlbi5zZXRTa2lwQXRMYWdzKG9sZF9za2lwYXRsYWdzKQ0KICAgICAgICAgICAgdXRpbHMuZXhpdChvYmplY3QpDQogICAgICAgIGVuZA0KICAgICAgICANCiAgICAgICAgaWYgc2VsZWN0Q2FtZXJhQnV0dG9uLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICAgICAgbG9jYWwgbmFtZXMgPSB7fQ0KICAgICAgICAgICAgbG9jYWwgY2FtZXJhcyA9IHt9DQogICAgICAgICAgICBmb3IgaW5kZXgsIGNhbWVyYSBpbiBpcGFpcnMoZ2V0Q2FtZXJhcygpKSBkbw0KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChuYW1lcywgImNhbTogIiAuLiBpbmRleCkNCiAgICAgICAgICAgICAgICBjYW1lcmFzW2luZGV4XSA9IGNhbWVyYQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBzZWxlY3RDYW1lcmFNZW51ID0gZ3VpLmNvbnRleHQoMSwgMSwgbmFtZXMpDQogICAgICAgICAgICBzZWxlY3RDYW1lcmFNZW51LmNhbWVyYXMgPSBjYW1lcmFzDQogICAgICAgIGVuZA0KDQogICAgICAgIGlmIHBob3RvQnV0dG9uLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICAgICAgaWYgY2FtZXJhIHRoZW4NCiAgICAgICAgICAgICAgICBmcy53cml0ZSgiL2RhdGEvcGhvdG9zLyIgLi4gdG9zdHJpbmcoc20udXVpZC5uZXcoKSk6c3ViKDEsIDYpLCBzbS5qc29uLndyaXRlSnNvblN0cmluZyhjdXJyZW50RnJhbWUpKQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIGd1aS5zcGxhc2goInNlbGVjdCBjYW1lcmEiKQ0KICAgICAgICAgICAgICAgIHNwbGFzaEZsYWcgPSB0cnVlDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQoNCiAgICAgICAgaWYgbG9hZEJ1dHRvbi5nZXRTdGF0ZSgpIG9yIHJlbW92ZUJ1dHRvbi5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgICAgIGxvY2FsIG5hbWVzID0ge30NCiAgICAgICAgICAgIGxvY2FsIGZpbGVzID0ge30NCiAgICAgICAgICAgIGZvciBfLCBuYW1lIGluIGlwYWlycyhmcy5saXN0KCIvZGF0YS9waG90b3MiKSBvciB7fSkgZG8NCiAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQobmFtZXMsIG5hbWUpDQogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGZpbGVzLCBmcy5jb25jYXQoIi9kYXRhL3Bob3RvcyIsIG5hbWUpKQ0KICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgIGlmIHJlbW92ZUJ1dHRvbi5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgICAgICAgICByZW1vdmVQaG90b01lbnUgPSBndWkuY29udGV4dCgxLCAxLCBuYW1lcykNCiAgICAgICAgICAgICAgICByZW1vdmVQaG90b01lbnUuZmlsZXMgPSBmaWxlcw0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIHNlbGVjdFBob3RvTWVudSA9IGd1aS5jb250ZXh0KDEsIDEsIG5hbWVzKQ0KICAgICAgICAgICAgICAgIHNlbGVjdFBob3RvTWVudS5maWxlcyA9IGZpbGVzDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQogICAgZW5kDQplbmQ=", "bin/desktop.lua": "b3B0aW9ucyA9IGFyZ3NbMV0NCnNjcmVlbiA9IG9wdGlvbnMuc2NyZWVuDQpndWkgPSBndWlsaWIuY3JlYXRlKHNjcmVlbikNCg0KLS0tLS0tLS0tLS0tLS0tLS0NCg0Kc2NlbmUgPSBndWkuY3JlYXRlU2NlbmUoIjAwRkZGRiIpDQoNCnNjZW5lLmNyZWF0ZURyYXdlcigwLCBndWkuc2l6ZVkgLSAxMCwgZ3VpLnNpemVYLCAxMCwgZnVuY3Rpb24oc2NyZWVuLCB4LCB5LCBzeCwgc3kpDQogICAgc2NyZWVuLmZpbGxSZWN0KHgsIHksIHN4LCBzeSwgdXRpbHMuZm9ybWF0Q29sb3IoIjAwRkYwMCIpKQ0KZW5kKQ0KDQptZW51QnV0dG9uID0gc2NlbmUuY3JlYXRlQnV0dG9uKA0KICAgIDAsDQogICAgZ3VpLnNpemVZIC0gMTAsDQogICAgMTAsDQogICAgMTAsDQogICAgIk0iLA0KICAgICIwMDAwRkYiLA0KICAgICJGRkZGRkYiLA0KICAgICJGRjAwMDAiLA0KICAgICIwMDAwMDAiLA0KICAgIDENCikNCg0KZ3VpLnNlbGVjdChzY2VuZSkNCg0KZnVuY3Rpb24gdXBkYXRlUHJvZ3JhbXNMaXN0KCkNCiAgICBpZiBwcm9ncmFtbUJ1dHRvbnMgdGhlbg0KICAgICAgICBmb3IgaSwgdiBpbiBpcGFpcnMocHJvZ3JhbW1CdXR0b25zKSBkbw0KICAgICAgICAgICAgZm9yIGkyLCB2MiBpbiBpcGFpcnMoc2NlbmUub2JqZWN0cykgZG8NCiAgICAgICAgICAgICAgICBpZiB2ID09IHYyIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgdGFibGUucmVtb3ZlKHNjZW5lLm9iamVjdHMsIGkyKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgIGVuZA0KICAgIA0KICAgIHByb2dyYW1tQnV0dG9ucyA9IHt9DQogICAgDQogICAgbG9jYWwgY291bnQgPSAwDQogICAgZm9yIGksIHYgaW4gaXBhaXJzKGZzLmxpc3QoIi9iaW4iKSkgZG8NCiAgICAgICAgbG9jYWwgcGF0aCA9IGZzLmNvbmNhdCgiL2JpbiIsIHYpDQogICAgICAgIGlmIG5vdCBmcy5pc0RpcmVjdG9yeShwYXRoKSBhbmQgcGF0aCB+PSBvYmplY3QucGF0aCB0aGVuDQogICAgICAgICAgICBsb2NhbCBidXR0b24gPSBzY2VuZS5jcmVhdGVCdXR0b24oDQogICAgICAgICAgICAgICAgNCwNCiAgICAgICAgICAgICAgICAoY291bnQgKiAxMSkgKyA0LA0KICAgICAgICAgICAgICAgIGd1aS5zaXplWCAvIDIsDQogICAgICAgICAgICAgICAgMTAsDQogICAgICAgICAgICAgICAgZnMuaGlkZUV4cCh2KSwNCiAgICAgICAgICAgICAgICAiRkZGRkZGIiwNCiAgICAgICAgICAgICAgICAiMzMzMzMzIiwNCiAgICAgICAgICAgICAgICAiMDAwMDAwIiwNCiAgICAgICAgICAgICAgICAiRkZGRkZGIiwNCiAgICAgICAgICAgICAgICAxDQogICAgICAgICAgICApDQogICAgICAgICAgICBidXR0b24ucGF0aCA9IHBhdGgNCiAgICAgICAgICAgIHRhYmxlLmluc2VydChwcm9ncmFtbUJ1dHRvbnMsIGJ1dHRvbikNCiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxDQogICAgICAgIGVuZA0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIG9uU3RhcnQoKQ0KICAgIHVwZGF0ZVByb2dyYW1zTGlzdCgpDQplbmQNCg0KZnVuY3Rpb24gb25UaWNrKCkNCiAgICBpZiBub3Qgb3BlblByb2dyYW1tIHRoZW4NCiAgICAgICAgZ3VpLnRpY2soKQ0KICAgICAgICBpZiB0ZXh0T25TY3JlZW4gdGhlbg0KICAgICAgICAgICAgaWYgZ3VpLmNsaWNrIGFuZCBndWkuY2xpY2tbM10gPT0gInByZXNzZWQiIHRoZW4NCiAgICAgICAgICAgICAgICB0ZXh0T25TY3JlZW4gPSBuaWwNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbHNlaWYgY29udGV4dE1lbnUgdGhlbg0KICAgICAgICAgICAgY29udGV4dE1lbnUuZHJhdygpDQogICAgICAgICAgICBndWkuc2NyZWVuLmZsdXNoKCkNCg0KICAgICAgICAgICAgbG9jYWwgb3V0ID0gY29udGV4dE1lbnUuZ2V0U2VsZWN0ZWQoKQ0KICAgICAgICAgICAgaWYgb3V0IHRoZW4NCiAgICAgICAgICAgICAgICBjb250ZXh0TWVudSA9IG5pbA0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVsc2UNCiAgICAgICAgICAgIC0tW1sNCiAgICAgICAgICAgIGlmIG1lbnVCdXR0b24uZ2V0U3RhdGUoKSB0aGVuDQogICAgICAgICAgICAgICAgY29udGV4dE1lbnUgPSBndWkuY29udGV4dCgoZ3VpLnNpemVYIC8gMikgKyA2LCA0LCB7InF3ZSAxIiwgImFzZCAyIiwgInp4YyAzIiwgInR5dSA0In0pDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIF1dDQogICAgICAgICAgICBpZiBtZW51QnV0dG9uLmdldFN0YXRlKCkgdGhlbg0KICAgICAgICAgICAgICAgIGNvbnRleHRNZW51ID0gZ3VpLnllc25vKCIxMjMiKQ0KICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgIGZvciBpLCB2IGluIGlwYWlycyhwcm9ncmFtbUJ1dHRvbnMpIGRvDQogICAgICAgICAgICAgICAgaWYgdi5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgb3BlblByb2dyYW1tID0ge2VuYWJsZSA9IHRydWUsIHBhdGggPSB2LnBhdGgsIGFyZ3MgPSB7e3NjcmVlbiA9IHNjcmVlbn19LCBub3RQcmludEVycm9yID0gdHJ1ZX0NCiAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KF9HLm9wZW5Qcm9ncmFtcywgb3BlblByb2dyYW1tKQ0KICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgIGd1aS5kcmF3KCkNCiAgICAgICAgZW5kDQogICAgZWxzZQ0KICAgICAgICBsb2NhbCBmaW5kZWQgPSBmYWxzZQ0KICAgICAgICBmb3IgaSwgdiBpbiBpcGFpcnMoX0cub3BlblByb2dyYW1zKSBkbw0KICAgICAgICAgICAgaWYgdiA9PSBvcGVuUHJvZ3JhbW0gdGhlbg0KICAgICAgICAgICAgICAgIGZpbmRlZCA9IHRydWUNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgICAgICBpZiBub3QgZmluZGVkIG9yIG9wZW5Qcm9ncmFtbS5lcnJvciB0aGVuDQogICAgICAgICAgICBpZiBvcGVuUHJvZ3JhbW0uZXJyb3IgdGhlbg0KICAgICAgICAgICAgICAgIGd1aS5zcGxhc2gob3BlblByb2dyYW1tLmVycm9yKQ0KICAgICAgICAgICAgICAgIHRleHRPblNjcmVlbiA9IHRydWUNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZm9yIGksIHYgaW4gaXBhaXJzKF9HLm9wZW5Qcm9ncmFtcykgZG8NCiAgICAgICAgICAgICAgICBpZiB2ID09IG9wZW5Qcm9ncmFtbSB0aGVuDQogICAgICAgICAgICAgICAgICAgIHRhYmxlLnJlbW92ZShfRy5vcGVuUHJvZ3JhbXMsIGkpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIG9wZW5Qcm9ncmFtbSA9IG5pbA0KICAgICAgICBlbmQNCiAgICBlbmQNCmVuZA==", "bin/settings.lua": "b3B0aW9ucyA9IGFyZ3NbMV0NCnNjcmVlbiA9IG9wdGlvbnMuc2NyZWVuDQpndWkgPSBndWlsaWIuY3JlYXRlKHNjcmVlbikNCg0Kc2NlbmUgPSBndWkuY3JlYXRlU2NlbmUoIjAwMDAwMCIpDQoNCmxhYmVsID0gc2NlbmUuY3JlYXRlTGFiZWwoNCwgKGd1aS5zaXplWSAvIDIpIC0gNSwgZ3VpLnNpemVYIC0gOCwgMTAsICIyMjIyMjIiLCAiMDBmZjAwIikNCmV4aXRCdXR0b24gPSBzY2VuZS5jcmVhdGVCdXR0b24oDQogICAgZ3VpLnNpemVYIC0gOCwNCiAgICAwLA0KICAgIDgsDQogICAgOCwNCiAgICAiWCIsDQogICAgIjAwZmYwMCIsDQogICAgIjAwMDAwMCIsDQogICAgIjAwMDBGRiIsDQogICAgIjAwMDAwMCIsDQogICAgMQ0KKQ0KDQpndWkuc2VsZWN0KHNjZW5lKQ0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNCmZ1bmN0aW9uIG9uVGljaygpDQogICAgZ3VpLnRpY2soKQ0KDQogICAgaWYgZXhpdEJ1dHRvbi5nZXRTdGF0ZSgpIHRoZW4NCiAgICAgICAgdXRpbHMuZXhpdChvYmplY3QpDQogICAgZW5kDQoNCiAgICBsb2NhbCBrZXlib2FyZCA9IGdldEtleWJvYXJkcygpWzFdDQogICAgaWYga2V5Ym9hcmQgdGhlbg0KICAgICAgICBsYWJlbC50ZXh0ID0gImVzYyAtIGxvYWQsIGVudGVyIC0gc2F2ZSINCg0KICAgICAgICBsb2NhbCBzdHIgPSBzbS5qc29uLndyaXRlSnNvblN0cmluZyhzZXR0aW5ncy5jdXJyZW50KQ0KICAgICAgICBsb2NhbCBrc3RyID0ga2V5Ym9hcmQucmVhZCgpDQoNCiAgICAgICAgaWYga2V5Ym9hcmQuaXNFc2MoKSB0aGVuDQogICAgICAgICAgICBrZXlib2FyZC53cml0ZShzdHIpDQogICAgICAgIGVuZA0KICAgICAgICANCiAgICAgICAgaWYga2V5Ym9hcmQuaXNFbnRlcigpIHRoZW4NCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uICgpDQogICAgICAgICAgICAgICAgc2V0dGluZ3MuY3VycmVudCA9IHNtLmpzb24ucGFyc2VKc29uU3RyaW5nKGtzdHIpDQogICAgICAgICAgICAgICAgc2V0dGluZ3Muc2F2ZSgpDQogICAgICAgICAgICBlbmQpDQogICAgICAgIGVuZA0KICAgICAgICBrZXlib2FyZC5yZXNldEJ1dHRvbnMoKQ0KICAgIGVsc2UNCiAgICAgICAgbGFiZWwudGV4dCA9ICJjb25uZWN0IHRoZSBrZXlib2FyZCINCiAgICBlbmQNCg0KICAgIGd1aS5kcmF3KCkNCmVuZA==", "lib/fs.lua": "", "lib/guilib.lua": "", "lib/settings.lua": "bG9jYWwgc2V0dGluZ3MgPSB7fQ0Kc2V0dGluZ3MucGF0aCA9ICIvZGF0YS9zZXR0aW5ncy5qc29uIg0Kc2V0dGluZ3MuZGVmYXVsdCA9IHsNCiAgICBtYWluUHJvZ3JhbW1QYXRoID0gIi9iaW4vZGVza3RvcC5sdWEiLA0KICAgIHNjcmVlbkJyaWdodG5lc3MgPSAiZmYiLA0KICAgIG9ubHlBRmlyc3RTY3JlZW4gPSBmYWxzZSwNCiAgICBkaXNhYmxlV29ya2luZ1dpdGhTY3JlZW5zID0gZmFsc2UsDQogICAgZGVmYXVsdFNraXBBdExhZ3MgPSB0cnVlLA0KfQ0KDQpmdW5jdGlvbiBzZXR0aW5ncy5zYXZlKCkNCiAgICBmcy53cml0ZShzZXR0aW5ncy5wYXRoLCBzbS5qc29uLndyaXRlSnNvblN0cmluZyhzZXR0aW5ncy5jdXJyZW50KSkNCmVuZA0KDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQppZiBmcy5leGlzdHMoc2V0dGluZ3MucGF0aCkgdGhlbg0KICAgIHNldHRpbmdzLmN1cnJlbnQgPSBzbS5qc29uLnBhcnNlSnNvblN0cmluZyhmcy5yZWFkKHNldHRpbmdzLnBhdGgpKQ0KZWxzZQ0KICAgIHNldHRpbmdzLmN1cnJlbnQgPSB1dGlscy5kZWVwY29weShzZXR0aW5ncy5kZWZhdWx0KQ0KICAgIHNldHRpbmdzLnNhdmUoKQ0KZW5kDQoNCnJldHVybiBzZXR0aW5ncw==", "lib/utils.lua": "bG9jYWwgdXRpbHMgPSB7fQ0KDQpmdW5jdGlvbiB1dGlscy50b1BhcnRzKHN0ciwgbWF4KSAtLXRvUGFydHMoIjEyMzQ1IiwgMikgPT0geyIxMiIsICIzNCIsICI1In0NCiAgICBsb2NhbCBzdHJzID0ge30NCiAgICB3aGlsZSAjc3RyID4gMCBkbw0KICAgICAgICB0YWJsZS5pbnNlcnQoc3Rycywgc3RyOnN1YigxLCBtYXgpKQ0KICAgICAgICBzdHIgPSBzdHI6c3ViKCNzdHJzWyNzdHJzXSArIDEpDQogICAgZW5kDQogICAgcmV0dXJuIHN0cnMNCmVuZA0KDQpmdW5jdGlvbiB1dGlscy5zcGxpdChzdHIsIHNlcCkNCiAgICBsb2NhbCBwYXJ0cywgY291bnQsIGkgPSB7fSwgMSwgMQ0KICAgIHdoaWxlIHRydWUgZG8NCiAgICAgICAgaWYgaSA+ICNzdHIgdGhlbiBicmVhayBlbmQNCiAgICAgICAgbG9jYWwgY2hhciA9IHN0cjpzdWIoaSwgI3NlcCArIChpIC0gMSkpDQogICAgICAgIGlmIG5vdCBwYXJ0c1tjb3VudF0gdGhlbiBwYXJ0c1tjb3VudF0gPSAiIiBlbmQNCiAgICAgICAgaWYgY2hhciA9PSBzZXAgdGhlbg0KICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDENCiAgICAgICAgICAgIGkgPSBpICsgI3NlcA0KICAgICAgICBlbHNlDQogICAgICAgICAgICBwYXJ0c1tjb3VudF0gPSBwYXJ0c1tjb3VudF0gLi4gc3RyOnN1YihpLCBpKQ0KICAgICAgICAgICAgaSA9IGkgKyAxDQogICAgICAgIGVuZA0KICAgIGVuZA0KICAgIGlmIHN0cjpzdWIoI3N0ciAtICgjc2VwIC0gMSksICNzdHIpID09IHNlcCB0aGVuIHRhYmxlLmluc2VydChwYXJ0cywgIiIpIGVuZA0KICAgIHJldHVybiBwYXJ0cw0KZW5kDQoNCmZ1bmN0aW9uIHV0aWxzLmRlZXBjb3B5KHQpDQogICAgbG9jYWwgY2FjaGUgPSB7fQ0KICAgIGxvY2FsIGZ1bmN0aW9uIHJlY3Vyc2UodGJsLCBuZXd0YmwpDQogICAgICAgIGxvY2FsIG5ld3RibCA9IG5ld3RibCBvciB7fQ0KICAgIA0KICAgICAgICBmb3IgaywgdiBpbiBwYWlycyh0YmwpIGRvDQogICAgICAgICAgICBpZiB0eXBlKHYpID09ICJ0YWJsZSIgdGhlbg0KICAgICAgICAgICAgICAgIGxvY2FsIGx0YmwgPSBjYWNoZVt2XQ0KICAgICAgICAgICAgICAgIGlmIG5vdCBsdGJsIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbdl0gPSB7fQ0KICAgICAgICAgICAgICAgICAgICBsdGJsID0gY2FjaGVbdl0NCiAgICAgICAgICAgICAgICAgICAgcmVjdXJzZSh2LCBjYWNoZVt2XSkNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICBuZXd0Ymxba10gPSBsdGJsDQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgbmV3dGJsW2tdID0gdg0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KDQogICAgICAgIHJldHVybiBuZXd0YmwNCiAgICBlbmQNCg0KICAgIHJldHVybiByZWN1cnNlKHQpDQplbmQNCg0KZnVuY3Rpb24gdXRpbHMuY3JlYXRlRW52KCkNCiAgICBsb2NhbCBlbnYgPSB7fQ0KICAgIGZvciBrZXksIHZhbHVlIGluIHBhaXJzKF9HKSBkbw0KICAgICAgICBlbnZba2V5XSA9IHZhbHVlDQogICAgZW5kDQogICAgZW52Lm9uU3RhcnQgPSBuaWwNCiAgICBlbnYub25UaWNrID0gbmlsDQogICAgZW52Lm9uRXJyb3IgPSBuaWwNCiAgICBlbnYub25TdG9wID0gbmlsDQoNCiAgICBlbnYuX0VOViA9IGVudg0KICAgIGVudi5fRyA9IF9HDQoNCiAgICByZXR1cm4gZW52DQplbmQNCg0KZnVuY3Rpb24gdXRpbHMuZm9ybWF0Q29sb3IoY29sb3IpDQogICAgY29sb3IgPSBjb2xvcjpsb3dlcigpDQogICAgaWYgI2NvbG9yID09IDggdGhlbg0KICAgICAgICByZXR1cm4gY29sb3INCiAgICBlbHNlaWYgI2NvbG9yID09IDYgdGhlbg0KICAgICAgICByZXR1cm4gY29sb3IgLi4gc2V0dGluZ3MuY3VycmVudC5zY3JlZW5CcmlnaHRuZXNzDQogICAgZWxzZQ0KICAgICAgICBlcnJvcigiYmFkIGNvbG9yIiwgMSkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiB1dGlscy5leGl0KG9iamVjdCkNCiAgICBmb3IgaSwgdiBpbiBpcGFpcnMoX0cub3BlblByb2dyYW1zKSBkbw0KICAgICAgICBpZiBub3Qgb2JqZWN0LmRlZmF1bHQgYW5kIHYgPT0gb2JqZWN0IHRoZW4NCiAgICAgICAgICAgIHRhYmxlLnJlbW92ZShfRy5vcGVuUHJvZ3JhbXMsIGkpDQogICAgICAgICAgICBicmVhaw0KICAgICAgICBlbmQNCiAgICBlbmQNCmVuZA0KDQpyZXR1cm4gdXRpbHM="}