dofile "$MOD_DATA/Scripts/Config.lua"

NetworkRouter = class(nil)

NetworkRouter.MAX_NETWORK_CONNECTIONS = 8

NetworkRouter.maxParentCount = NetworkRouter.MAX_NETWORK_CONNECTIONS
NetworkRouter.maxChildCount = NetworkRouter.MAX_NETWORK_CONNECTIONS
NetworkRouter.connectionInput = sm.interactable.connectionType.networking
NetworkRouter.connectionOutput = sm.interactable.connectionType.networking
NetworkRouter.colorNormal = sm.color.new(0xedc84cff)
NetworkRouter.colorHighlight = sm.color.new(0xebcf71ff)

NetworkRouter.MAX_BUFFER_SIZE = 512

-- CLIENT --

function NetworkRouter.getParentCount(self, connectionType)
	return #self.interactable:getParents(connectionType)
end

function NetworkRouter.getChildCount(self, connectionType)
	return #self.interactable:getChildren(connectionType)
end

function NetworkRouter.getNetworkConnectionsCount(self)
	return self:getChildCount() + self:getParentCount(sm.interactable.connectionType.networking)
end

function NetworkRouter.client_getAvailableParentConnectionCount(self, connectionType)
	--if bit.band(connectionType, sm.interactable.connectionType.composite) ~= 0 then
	--	return 1 - self:getParentCount(sm.interactable.connectionType.composite)
	--end

	return NetworkRouter.MAX_NETWORK_CONNECTIONS - self:getNetworkConnectionsCount()
end

function NetworkRouter.client_getAvailableChildConnectionCount(self, connectionType)
	return NetworkRouter.MAX_NETWORK_CONNECTIONS - self:getNetworkConnectionsCount()
end

-- SERVER --


function NetworkRouter.server_computerIsConnected(self)
	return self:getParentCount(sm.interactable.connectionType.composite) ~= 0
end

function NetworkRouter.server_onCreate(self)
	self.packetQueue = {}

	local id = self.interactable:getId()
	--sc.networkRoutersDatas[id] = self:createData()
	sc.networking[id] = self
end

function NetworkRouter.server_onDestroy(self)
	local id = self.interactable:getId()
	sc.networking[id] = nil
	--sc.networkRoutersDatas[id] = nil
end

function NetworkRouter.server_onFixedUpdate(self, dt)
	if #self.packetQueue > 0 then
		self:sendPackets()
	end
end

function NetworkRouter.sendPackets(self)
	local sendTo1 = self.interactable:getParents()
	local sendTo2 = self.interactable:getChildren()

	local net = sc.networking

	local queue = self.packetQueue

	for k, v in pairs(sendTo1) do
		local script = net[v:getId()]
		script:propagatePackets(queue)
	end

	for k, v in pairs(sendTo2) do
		local script = net[v:getId()]
		script:propagatePackets(queue)
	end

	self.packetQueue = {}
end

function NetworkRouter.getId(self)
	return self.interactable:getId()
end

-- interface method
function NetworkRouter.propagatePackets(self, packets)
	local id = self:getId()
	local queue = self.packetQueue
	local copy = sc.networking.packetCopyPath

	local insert = table.insert

	local maxSize = NetworkRouter.MAX_BUFFER_SIZE

	for k, packet in pairs(packets) do
		if #queue <= maxSize then
			local transmitters = packet.transmitters

			if transmitters[id] == nil then
				transmitters[id] = true

				packet = copy(packet)
				insert(packet.transmitterPath, id)

				insert(queue, packet)
			end
		else
			break
		end
	end
end